import { Telegraf, Scenes, session, Markup } from 'telegraf';
import { personal } from './data.js';
import axios from 'axios';
import fs from 'fs';
import { createNewGroup, getListLength } from './notion.js';
import dotenv from 'dotenv';
dotenv.config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

bot.telegram.setMyCommands([
  { command: 'start', description: 'Start the bot' },
  { command: 'create', description: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑' },
]);
const foundPerson = (ctx) => {
  const found = personal.find(
    (person) => person.name.toLowerCase() === ctx.toLowerCase(),
  );
  return found;
};
const key = {
  out: '–í—ã–π—Ç–∏',
};

// –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const step1 = async (ctx) => {
  ctx.wizard.state.list = {};
  ctx.reply(
    '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∏—Ç–µ–ª—è:',
    Markup.keyboard([['Aleksandr', 'Vladimir'], [`${key.out}`]])
      .resize()
      .oneTime(),
  );
  return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
};

// –®–∞–≥ 2: –ó–∞–ø—Ä–æ—Å –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const step2 = async (ctx) => {
  const fileId = ctx.message.document.file_id; // –ü–æ–ª—É—á–∞–µ–º file_id –¥–æ–∫—É–º–µ–Ω—Ç–∞
  const fileName = ctx.message.document.file_name; // –ò–º—è —Ñ–∞–π–ª–∞
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å Telegram
    const fileLink = await ctx.telegram.getFileLink(fileId);

    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫
    const uploadUrl = await getYandexDiskUploadUrl(fileName);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å Telegram –∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫
    const response = await axios({
      method: 'get',
      url: fileLink,
      responseType: 'stream', // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Ç–æ–∫ –≤ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫
    const uploadResponse = await axios.put(uploadUrl, response.data, {
      headers: {
        'Content-Type': 'application/octet-stream', // –¢–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      },
    });

    if (uploadResponse.status === 201) {
      console.log(`–§–∞–π–ª ${fileName} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫!`);
      ctx.reply(`–§–∞–π–ª ${fileName} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫.`);
    } else {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫:', uploadResponse.status);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.');
  }

  await axios
    .put(
      `https://cloud-api.yandex.net/v1/disk/resources/publish?path=${fileName}`,
      null, // –ó–¥–µ—Å—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
      {
        headers: {
          Authorization: `OAuth ${process.env.MY_TOKEN}`,
          'Content-Type': 'application/json',
        },
      },
    )

    .then((response) => {
      console.log(response.data.href, 'asdasd');
      // –ü–µ—á–∞—Ç–∞–µ–º public_url (—Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª) –∏ public_key (–∫–ª—é—á)
      console.log('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª:', response);
      console.log('Public Key:', response);
    })
    .catch((error) => {
      console.error(
        '–û—à–∏–±–∫–∞ publich:',
        error.response ? error.response.data : error.message,
      );
    });

  //   const metadataResponse = await axios.get(
  //     `https://cloud-api.yandex.net/v1/disk/resources?path=${fileName}`,
  //     {
  //       headers: {
  //         Authorization: `OAuth ${process.env.MY_TOKEN}`,
  //       },
  //     },
  //   );
  //   console.log(metadataResponse, 'asdasd');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫
async function getYandexDiskUploadUrl(fileName) {
  const uploadUrl = 'https://cloud-api.yandex.net/v1/disk/resources/upload';
  const path = `/${fileName}`; // –ü—É—Ç—å –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–µ, –∫—É–¥–∞ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª

  const headers = {
    Authorization: ` ${process.env.MY_TOKEN}`, // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å OAuth —Ç–æ–∫–µ–Ω–æ–º
  };

  try {
    // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    const res = await axios.get(uploadUrl, {
      headers,
      params: { path },
    });

    return res.data.href; // URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫
  } catch (error) {
    console.error(
      '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫:',
      error,
    );
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫');
  }
}

//   if (ctx.message.text === '–í—ã–π—Ç–∏') {
//     await ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å—Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.');
//     return ctx.scene.leave();
//   }
//   const person = foundPerson(ctx.message.text);
//   if (!person) {
//     await ctx.reply(
//       `–í—ã –≤—ã–±—Ä–∞–ª–∏: ${ctx.message.text}. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ—Ç! –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.`,
//     );
//     ctx.scene.leave();
//     return;
//   }
//   if (person) {
//     ctx.wizard.state.list['–£—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π'] = {
//       // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//       people: [
//         {
//           id: person.id,
//         },
//       ],
//     };
//   }

//   if (ctx.message.text === '–í—ã–π—Ç–∏') {
//     await ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å—Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.');
//     return ctx.scene.leave();
//   }
//   ctx.wizard.state.user = ctx.message.text;
//   await ctx.reply(
//     `–û—Ç–ª–∏—á–Ω–æ, ${ctx.message.text}!  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–µ "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ" (–ø—Ä–∏–º–µ—Ä: "–°—Ç—É–ª"):`,
//     Markup.keyboard([[`${key.out}`]])
//       .resize()
//       .oneTime(),
//   );

// –®–∞–≥ 3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
const step3 = async (ctx) => {
  if (ctx.message.text === '–í—ã–π—Ç–∏') {
    await ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å—Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.');
    return ctx.scene.leave();
  }

  ctx.wizard.state.list['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] = {
    title: [
      {
        text: {
          content: ctx.message.text,
        },
      },
    ],
  };
  ctx.wizard.state.product = ctx.message.text;
  await ctx.reply(
    `–í—ã –≤—ã–±—Ä–∞–ª–∏: ${ctx.message.text}. –î–∞–ª–µ–µ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å—Ä–æ—á–Ω–æ—Ç—å –∑–∞—è–≤–∫–∏`,
    Markup.keyboard([['–°—Ä–æ—á–Ω–æ', '–ù–µ —Å—Ä–æ—á–Ω–æ'], [`${key.out}`]])
      .resize()
      .oneTime(),
  );
  return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
};

const step4 = async (ctx) => {
  if (ctx.message.text === '–í—ã–π—Ç–∏') {
    await ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å—Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.');
    return ctx.scene.leave();
  }
  if (ctx.message.text === '–ù–µ —Å—Ä–æ—á–Ω–æ' && ctx.message.text === '–°—Ä–æ—á–Ω–æ') {
    await ctx.reply(
      `–í—ã –≤—ã–±—Ä–∞–ª–∏: ${ctx.message.text}. –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –í—ã–π—Ç–∏`,
      Markup.keyboard([['–°—Ä–æ—á–Ω–æ', '–ù–µ —Å—Ä–æ—á–Ω–æ'], [`${key.out}`]])
        .resize()
        .oneTime(),
    );
  }
  if (ctx.message.text === '–ù–µ —Å—Ä–æ—á–Ω–æ') {
    ctx.wizard.state.quickly = ctx.message.text;
    await ctx.reply(
      `–í—ã –≤—ã–±—Ä–∞–ª–∏: ${ctx.message.text}. –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –í—ã–π—Ç–∏`,
      Markup.keyboard([['–°—Ä–æ—á–Ω–æ', '–ù–µ —Å—Ä–æ—á–Ω–æ'], [`${key.out}`]])
        .resize()
        .oneTime(),
    );
    return ctx.wizard.next();
  }
  if (ctx.message.text === '–°—Ä–æ—á–Ω–æ') {
    ctx.wizard.state.list['–°—Ä–æ—á–Ω–æ—Å—Ç—å'] = {
      type: 'status',
      status: {
        name: '–°—Ä–æ—á–Ω–æ',
      },
    };
    ctx.wizard.state.quickly = ctx.message.text;
  }

  return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
};
const step5 = async (ctx) => {
  if (ctx.message.text === '–í—ã–π—Ç–∏') {
    await ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å—Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.');
    return ctx.scene.leave();
  }

  if (ctx.message.text === '–°—Ä–æ—á–Ω–æ') {
    ctx.wizard.state.list['–°—Ä–æ—á–Ω–æ—Å—Ç—å'] = {
      type: 'status',
      status: {
        name: '–°—Ä–æ—á–Ω–æ',
      },
    };
    ctx.wizard.state.quickly = ctx.message.text;
  }

  return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
};
const step–°heck = async (ctx) => {
  if (ctx.message.text === '–í—ã–π—Ç–∏') {
    await ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å—Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.');
    return ctx.scene.leave();
  }

  await ctx.reply(`–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º:
  - –ò–º—è: ${ctx.wizard.state.user}
  - –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ${ctx.wizard.state.product}
  - –°—Ä–æ—á–Ω–æ—Å—Ç—å: ${ctx.wizard.state.quickly}
  –í—Å—ë –≤–µ—Ä–Ω–æ? (–¥–∞/–Ω–µ—Ç)`);
  return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
};

// –®–∞–≥ 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
const stepConfirmation = async (ctx) => {
  const confirmation = ctx.message.text.toLowerCase();
  if (confirmation === '–¥–∞') {
    await ctx.reply('–ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω! üéâ');
    createNewGroup(ctx.wizard.state.list);
    return ctx.scene.leave(); // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã
  } else if (confirmation === '–Ω–µ—Ç') {
    await ctx.reply('–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏ /start.');
    return ctx.scene.leave(); // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã
  } else {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç".');
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ Wizard Scene
const registrationWizard = new Scenes.WizardScene(
  'registration-wizard',
  step1,
  step2,
  step3,
  step4,
  step–°heck,
  stepConfirmation,
);

// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ü–µ–Ω –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ü–µ–Ω—É
const stage = new Scenes.Stage([registrationWizard]);

// –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–µ—Å—Å–∏–π –∏ —Å—Ü–µ–Ω
bot.use(session());
bot.use(stage.middleware());

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /create –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω—ã
bot.command('create', (ctx) => ctx.scene.enter('registration-wizard'));

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot
  .launch()
  .then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ'))
  .catch((err) => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
// const oauthToken = process.env.MY_TOKEN; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à OAuth-—Ç–æ–∫–µ–Ω

// // URL API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
// const url = 'https://cloud-api.yandex.net/v1/disk';

// fetch(url, {
//   method: 'GET',
//   headers: {
//     Authorization: `${oauthToken}`,
//     'content-type': 'application/json; charset=utf-8',
//   },
// })
//   .then((response) => response.json())
//   .then((data) => console.log(data)) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç JSON

//   .catch((error) => {
//     console.error('Error:', error); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
//   });
