import { hotels } from '../../data.js';
import { createNewGroup } from '../../notion.js';
import { foundHotel } from '../../constants/helpers.js';
import { Markup } from 'telegraf';
export const step6 = async (ctx) => {
  if (ctx.message.text === '–í—ã–π—Ç–∏') {
    await ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å—Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /create, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.');
    return ctx.scene.leave();
  }

  const hotel = foundHotel(ctx.message.text, hotels);
  if (!hotel) {
    await ctx.reply(
      `–í—ã –≤—ã–±—Ä–∞–ª–∏: ${ctx.message.text}. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ—Ç! –í–≤–µ–¥–∏—Ç–µ /create, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.`,
    );
    ctx.scene.leave();
    return;
  }
  if (hotel) {
    ctx.wizard.state.hotel = ctx.message.text;

    ctx.wizard.state.list['üè° –û–±—ä–µ–∫—Ç—ã'] = {
      type: 'relation',
      relation: [
        {
          id: hotel.id,
        },
      ],
    };
  }
  createNewGroup(ctx.wizard.state.list)
    .then(async () => {
      await ctx.reply(
        `–ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω! üéâ
		- –ò–º—è: ${ctx.wizard.state.personal}
		- –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ${ctx.wizard.state.product}
		- –°—Ä–æ—á–Ω–æ—Å—Ç—å: ${ctx.wizard.state.quickly}
		- –°—á–µ—Ç: ${ctx.wizard.state.expense}
		- –û–±—ä–µ–∫—Ç: ${ctx.wizard.state.hotel}
		–ó–∞—è–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ: https://www.notion.so/500na700/dfe5616ac1694459b0d18d87713f0ffa?v=5cbfb807d92f4f889d4dcb3f1e8fbfe8`,
        Markup.keyboard([['/create', '/help']])
          .resize()
          .oneTime(),
      );

      return ctx.scene.leave();
    })
    .catch(async (err) => {
      console.log(err);
      await ctx.reply(`–ó–∞–ø—Ä–æ—Å –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–∏–∑—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å /create.
		–¢–∞–∫ –∂–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å—á–µ—Ç: ${ctx.wizard.state.expense}`);
      return ctx.scene.leave();
    });
};
